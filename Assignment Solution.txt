Problem Statement 1: Write a script in python or javascript to find the solution of the following problem
How many two or more digit numbers can you make such that digits on left are always smaller than the digits on the right in the number?

For e.g.

189 is valid (because 1<8<9 and it is at least two digit number)
198 is not valid
288 is not valid


// #SOLUTION 1.-

let count = 0; // counter to keep track of valid numbers

for (let i = 10; i < 100; i++) {  // iterate through all two-digit numbers
  const digits = String(i).split('').map(Number); // convert number to an array of digits
  if (digits[0] < digits[1]) {  // check if left digit is smaller than right digit
    count++;
  }
}

for (let i = 100; i < 1000; i++) {  // iterate through all three-digit numbers
  const digits = String(i).split('').map(Number); // convert number to an array of digits
  if (digits[0] < digits[1] && digits[1] < digits[2]) {  // check if digits are in increasing order
    count++;
  }
}

console.log("Total valid numbers:",Â count);


Problem Statement 2: Write a script in python or javascript that would take two numbers and generate the additional steps in a json format.

For e.g. num1=1489, num2=714
Then output should be
{
"step1": { "carryString": "1", "sumString": "3" },
"step2": { "carryString": "11", "sumString": "03" },
"step3": { "carryString": "111", "sumString": "203" },
"step4": { "carryString": "111", "sumString": "2203" }
}


// #SOLUTION 2.-

function addSteps(num1, num2) {
    // Convert numbers to strings and reverse them to easily access digits
    let num1Str = num1.toString().split("").reverse().join("");
    let num2Str = num2.toString().split("").reverse().join("");

    let carry = 0
    let temp= 0 ;
    let steps = {};

    // Iterate through each digit in both numbers and add them
    let sumString ='';
    for (let i = 0; i < Math.max(num1Str.length, num2Str.length); i++){
      // Get the digit at the current position for both numbers, or 0 if it doesn't exist
      let digit1 = parseInt(num1Str[i]) || 0;
      let digit2 = parseInt(num2Str[i]) || 0;

      // Add the digits and the carry from the previous step
      let sum = digit1 + digit2 + carry

      // Calculate the new carry and sum digits for the current step
      carry = Math.floor(sum / 10)
      let sumDigit = sum % 10;
      temp = temp + carry
      //  tempcarry = carry.toString+tempcarry
       sumString = sumDigit.toString() +  sumString
      // Create an object for the current step and add it to the steps object
      steps["step" + (i+1)] = {
        "carryString": "1".repeat(temp),
        "sumString": sumString
      };
    }

    return steps;
  }

  let num1 = 1489;
  let num2 = 714;
  let steps = addSteps(num1, num2);
  console.log(steps);
